/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MidasGoldOracleInterface extends ethers.utils.Interface {
  functions: {
    "_managers(address)": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "availableChainlinkNet(string)": FunctionFragment;
    "creationTokenPrice()": FunctionFragment;
    "estimatedTokensForTokens(address,address,uint256)": FunctionFragment;
    "getDexRouter()": FunctionFragment;
    "getDexRouterAddress()": FunctionFragment;
    "getKimdomTokenPriceOracle()": FunctionFragment;
    "getMinimunTokenAmout(address,string)": FunctionFragment;
    "getNativeNetworkCurrencyPriceInUsd()": FunctionFragment;
    "getNativeTokenAddress(uint256)": FunctionFragment;
    "getRequiredEthAmount(string)": FunctionFragment;
    "getStableCoinAddress(uint256)": FunctionFragment;
    "getTokensValueInUSD(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
    "isInSwap()": FunctionFragment;
    "isPayingWithNativeCurrency(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "self()": FunctionFragment;
    "setDexRouter(address)": FunctionFragment;
    "setOracles(address)": FunctionFragment;
    "swapTokensForNativeToken(address,address,uint256)": FunctionFragment;
    "swapTokensForStableCoin(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_managers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableChainlinkNet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creationTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTokensForTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKimdomTokenPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimunTokenAmout",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeNetworkCurrencyPriceInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeTokenAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredEthAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoinAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensValueInUSD",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isInSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPayingWithNativeCurrency",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDexRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOracles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapTokensForNativeToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForStableCoin",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableChainlinkNet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKimdomTokenPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimunTokenAmout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeNetworkCurrencyPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredEthAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensValueInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayingWithNativeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDexRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForStableCoin",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MidasGoldOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MidasGoldOracleInterface;

  functions: {
    _managers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    addLiquidity(
      token: string,
      to: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableChainlinkNet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    creationTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimatedTokensForTokens(
      add1: string,
      add2: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDexRouter(overrides?: CallOverrides): Promise<[string]>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getKimdomTokenPriceOracle(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinimunTokenAmout(
      tokenAddress: string,
      network: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNativeNetworkCurrencyPriceInUsd(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNativeTokenAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequiredEthAmount(
      network: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStableCoinAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokensValueInUSD(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      goldOracleAddress: string,
      kindomTokenAddress: string,
      _midasMultinetworkRouter: string,
      _stableCoinAddress: string,
      _networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInSwap(overrides?: CallOverrides): Promise<[boolean]>;

    isPayingWithNativeCurrency(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    self(overrides?: CallOverrides): Promise<[string]>;

    setDexRouter(
      _midasMultinetworkRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracles(
      kindomTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForNativeToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForStableCoin(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addLiquidity(
    token: string,
    to: string,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableChainlinkNet(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creationTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  estimatedTokensForTokens(
    add1: string,
    add2: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDexRouter(overrides?: CallOverrides): Promise<string>;

  getDexRouterAddress(overrides?: CallOverrides): Promise<string>;

  getKimdomTokenPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimunTokenAmout(
    tokenAddress: string,
    network: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNativeNetworkCurrencyPriceInUsd(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNativeTokenAddress(
    _networkId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequiredEthAmount(
    network: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStableCoinAddress(
    _networkId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokensValueInUSD(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    goldOracleAddress: string,
    kindomTokenAddress: string,
    _midasMultinetworkRouter: string,
    _stableCoinAddress: string,
    _networkId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInSwap(overrides?: CallOverrides): Promise<boolean>;

  isPayingWithNativeCurrency(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  self(overrides?: CallOverrides): Promise<string>;

  setDexRouter(
    _midasMultinetworkRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracles(
    kindomTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForNativeToken(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForStableCoin(
    tokenAddress: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addLiquidity(
      token: string,
      to: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    availableChainlinkNet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creationTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTokensForTokens(
      add1: string,
      add2: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexRouter(overrides?: CallOverrides): Promise<string>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<string>;

    getKimdomTokenPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimunTokenAmout(
      tokenAddress: string,
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeNetworkCurrencyPriceInUsd(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeTokenAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequiredEthAmount(
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableCoinAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokensValueInUSD(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      goldOracleAddress: string,
      kindomTokenAddress: string,
      _midasMultinetworkRouter: string,
      _stableCoinAddress: string,
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInSwap(overrides?: CallOverrides): Promise<boolean>;

    isPayingWithNativeCurrency(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    self(overrides?: CallOverrides): Promise<string>;

    setDexRouter(
      _midasMultinetworkRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracles(
      kindomTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForNativeToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForStableCoin(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _managers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      token: string,
      to: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableChainlinkNet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creationTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTokensForTokens(
      add1: string,
      add2: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getKimdomTokenPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimunTokenAmout(
      tokenAddress: string,
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeNetworkCurrencyPriceInUsd(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeTokenAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredEthAmount(
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableCoinAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensValueInUSD(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      goldOracleAddress: string,
      kindomTokenAddress: string,
      _midasMultinetworkRouter: string,
      _stableCoinAddress: string,
      _networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInSwap(overrides?: CallOverrides): Promise<BigNumber>;

    isPayingWithNativeCurrency(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    self(overrides?: CallOverrides): Promise<BigNumber>;

    setDexRouter(
      _midasMultinetworkRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracles(
      kindomTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForNativeToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForStableCoin(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _managers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      token: string,
      to: string,
      tokenAmount: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableChainlinkNet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creationTokenPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimatedTokensForTokens(
      add1: string,
      add2: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDexRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKimdomTokenPriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimunTokenAmout(
      tokenAddress: string,
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeNetworkCurrencyPriceInUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeTokenAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredEthAmount(
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableCoinAddress(
      _networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensValueInUSD(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      goldOracleAddress: string,
      kindomTokenAddress: string,
      _midasMultinetworkRouter: string,
      _stableCoinAddress: string,
      _networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPayingWithNativeCurrency(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    self(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDexRouter(
      _midasMultinetworkRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracles(
      kindomTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForNativeToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForStableCoin(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
