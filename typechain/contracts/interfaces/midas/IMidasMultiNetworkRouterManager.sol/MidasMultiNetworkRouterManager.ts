/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface MidasMultiNetworkRouterManagerInterface
  extends utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "getDexRouter()": FunctionFragment;
    "getDexRouterAddress()": FunctionFragment;
    "getNativeNetworkCurrencyAddress(uint256)": FunctionFragment;
    "isInSwap()": FunctionFragment;
    "swapTokensForBNB(address,address,uint256)": FunctionFragment;
    "swapTokensForStableCoin(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "getDexRouter"
      | "getDexRouterAddress"
      | "getNativeNetworkCurrencyAddress"
      | "isInSwap"
      | "swapTokensForBNB"
      | "swapTokensForStableCoin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeNetworkCurrencyAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isInSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapTokensForBNB",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForStableCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeNetworkCurrencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForStableCoin",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MidasMultiNetworkRouterManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MidasMultiNetworkRouterManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDexRouter(overrides?: CallOverrides): Promise<[string]>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getNativeNetworkCurrencyAddress(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isInSwap(overrides?: CallOverrides): Promise<[boolean]>;

    swapTokensForBNB(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForStableCoin(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDexRouter(overrides?: CallOverrides): Promise<string>;

  getDexRouterAddress(overrides?: CallOverrides): Promise<string>;

  getNativeNetworkCurrencyAddress(
    networkId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isInSwap(overrides?: CallOverrides): Promise<boolean>;

  swapTokensForBNB(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForStableCoin(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDexRouter(overrides?: CallOverrides): Promise<string>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<string>;

    getNativeNetworkCurrencyAddress(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isInSwap(overrides?: CallOverrides): Promise<boolean>;

    swapTokensForBNB(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForStableCoin(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    getDexRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeNetworkCurrencyAddress(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInSwap(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensForBNB(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForStableCoin(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDexRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeNetworkCurrencyAddress(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensForBNB(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForStableCoin(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
