/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MetaCompanyManagerInterface extends utils.Interface {
  functions: {
    "burnMetaFranchise(address,uint256,uint256,uint8)": FunctionFragment;
    "ceos(address)": FunctionFragment;
    "ceosCompanies(address)": FunctionFragment;
    "claimFromAllFranchises()": FunctionFragment;
    "claimFromAllFranchisesBNB()": FunctionFragment;
    "companiesCeos(uint256)": FunctionFragment;
    "createCompany(address)": FunctionFragment;
    "createFranchise(address)": FunctionFragment;
    "createMetaFranchiseUsingBNB(uint256)": FunctionFragment;
    "createMetaFranchiseUsingUnclaimedBNB(uint256)": FunctionFragment;
    "getCEOS()": FunctionFragment;
    "getCompanyCEOAddress(uint256)": FunctionFragment;
    "getCompanyId(address)": FunctionFragment;
    "getCreateFranchisePriceBNB()": FunctionFragment;
    "getFranchiseValue()": FunctionFragment;
    "getFranchisesLastClaimDates(address)": FunctionFragment;
    "getMetaFranchisesUnclaimedRewards(address)": FunctionFragment;
    "getMetaFranchisesUnclaimedRewardsBNB(address)": FunctionFragment;
    "getNumberOfMetaFranchises(address)": FunctionFragment;
    "getTotalCeos()": FunctionFragment;
    "getTotalCompanies()": FunctionFragment;
    "getTotalFranchises()": FunctionFragment;
    "getTotalInvested()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isCeo(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "paused()": FunctionFragment;
    "self()": FunctionFragment;
    "sellMetaFranchise(address,uint256,uint256,uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnMetaFranchise"
      | "ceos"
      | "ceosCompanies"
      | "claimFromAllFranchises"
      | "claimFromAllFranchisesBNB"
      | "companiesCeos"
      | "createCompany"
      | "createFranchise"
      | "createMetaFranchiseUsingBNB"
      | "createMetaFranchiseUsingUnclaimedBNB"
      | "getCEOS"
      | "getCompanyCEOAddress"
      | "getCompanyId"
      | "getCreateFranchisePriceBNB"
      | "getFranchiseValue"
      | "getFranchisesLastClaimDates"
      | "getMetaFranchisesUnclaimedRewards"
      | "getMetaFranchisesUnclaimedRewardsBNB"
      | "getNumberOfMetaFranchises"
      | "getTotalCeos"
      | "getTotalCompanies"
      | "getTotalFranchises"
      | "getTotalInvested"
      | "initialize"
      | "isCeo"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "paused"
      | "self"
      | "sellMetaFranchise"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnMetaFranchise",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ceos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ceosCompanies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromAllFranchises",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromAllFranchisesBNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companiesCeos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompany",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFranchise",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMetaFranchiseUsingBNB",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMetaFranchiseUsingUnclaimedBNB",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getCEOS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCompanyCEOAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateFranchisePriceBNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFranchiseValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFranchisesLastClaimDates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaFranchisesUnclaimedRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaFranchisesUnclaimedRewardsBNB",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfMetaFranchises",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCeos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFranchises",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInvested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCeo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellMetaFranchise",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnMetaFranchise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ceosCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromAllFranchises",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromAllFranchisesBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companiesCeos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFranchise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMetaFranchiseUsingBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMetaFranchiseUsingUnclaimedBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCEOS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyCEOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateFranchisePriceBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFranchiseValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFranchisesLastClaimDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaFranchisesUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaFranchisesUnclaimedRewardsBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfMetaFranchises",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCeos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFranchises",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCeo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellMetaFranchise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreateCompany(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateCompany"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CreateCompanyEventObject {
  account: string;
  companyId: BigNumber;
}
export type CreateCompanyEvent = TypedEvent<
  [string, BigNumber],
  CreateCompanyEventObject
>;

export type CreateCompanyEventFilter = TypedEventFilter<CreateCompanyEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MetaCompanyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaCompanyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ceos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ceosCompanies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimFromAllFranchises(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFromAllFranchisesBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    companiesCeos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCompany(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFranchise(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMetaFranchiseUsingBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMetaFranchiseUsingUnclaimedBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCEOS(overrides?: CallOverrides): Promise<[string[]]>;

    getCompanyCEOAddress(
      companyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCompanyId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreateFranchisePriceBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFranchiseValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFranchisesLastClaimDates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMetaFranchisesUnclaimedRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMetaFranchisesUnclaimedRewardsBNB(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfMetaFranchises(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalCeos(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalCompanies(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalFranchises(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalInvested(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _metaCompanyAddress: PromiseOrValue<string>,
      _metaFranchiseManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isCeo(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    self(overrides?: CallOverrides): Promise<[string]>;

    sellMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burnMetaFranchise(
    to: PromiseOrValue<string>,
    companyId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    _metaFranchiseType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ceos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ceosCompanies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimFromAllFranchises(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFromAllFranchisesBNB(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  companiesCeos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createCompany(
    account: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFranchise(
    _account: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMetaFranchiseUsingBNB(
    _number: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMetaFranchiseUsingUnclaimedBNB(
    _number: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCEOS(overrides?: CallOverrides): Promise<string[]>;

  getCompanyCEOAddress(
    companyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCompanyId(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreateFranchisePriceBNB(overrides?: CallOverrides): Promise<BigNumber>;

  getFranchiseValue(overrides?: CallOverrides): Promise<BigNumber>;

  getFranchisesLastClaimDates(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMetaFranchisesUnclaimedRewards(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMetaFranchisesUnclaimedRewardsBNB(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfMetaFranchises(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalCeos(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalCompanies(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalFranchises(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalInvested(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _metaCompanyAddress: PromiseOrValue<string>,
    _metaFranchiseManagerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isCeo(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  self(overrides?: CallOverrides): Promise<string>;

  sellMetaFranchise(
    to: PromiseOrValue<string>,
    companyId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    _metaFranchiseType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ceos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ceosCompanies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFromAllFranchises(overrides?: CallOverrides): Promise<void>;

    claimFromAllFranchisesBNB(overrides?: CallOverrides): Promise<void>;

    companiesCeos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createCompany(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFranchise(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMetaFranchiseUsingBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMetaFranchiseUsingUnclaimedBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCEOS(overrides?: CallOverrides): Promise<string[]>;

    getCompanyCEOAddress(
      companyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCompanyId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateFranchisePriceBNB(overrides?: CallOverrides): Promise<BigNumber>;

    getFranchiseValue(overrides?: CallOverrides): Promise<BigNumber>;

    getFranchisesLastClaimDates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMetaFranchisesUnclaimedRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetaFranchisesUnclaimedRewardsBNB(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMetaFranchises(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCeos(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCompanies(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFranchises(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalInvested(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _metaCompanyAddress: PromiseOrValue<string>,
      _metaFranchiseManagerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isCeo(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    self(overrides?: CallOverrides): Promise<string>;

    sellMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateCompany(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      companyId?: null
    ): CreateCompanyEventFilter;
    CreateCompany(
      account?: PromiseOrValue<string> | null,
      companyId?: null
    ): CreateCompanyEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    burnMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ceos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ceosCompanies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFromAllFranchises(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFromAllFranchisesBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    companiesCeos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCompany(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFranchise(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMetaFranchiseUsingBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMetaFranchiseUsingUnclaimedBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCEOS(overrides?: CallOverrides): Promise<BigNumber>;

    getCompanyCEOAddress(
      companyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompanyId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateFranchisePriceBNB(overrides?: CallOverrides): Promise<BigNumber>;

    getFranchiseValue(overrides?: CallOverrides): Promise<BigNumber>;

    getFranchisesLastClaimDates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetaFranchisesUnclaimedRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetaFranchisesUnclaimedRewardsBNB(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMetaFranchises(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCeos(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCompanies(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFranchises(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalInvested(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _metaCompanyAddress: PromiseOrValue<string>,
      _metaFranchiseManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isCeo(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    self(overrides?: CallOverrides): Promise<BigNumber>;

    sellMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ceos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ceosCompanies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFromAllFranchises(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFromAllFranchisesBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    companiesCeos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCompany(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFranchise(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMetaFranchiseUsingBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMetaFranchiseUsingUnclaimedBNB(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCEOS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompanyCEOAddress(
      companyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompanyId(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateFranchisePriceBNB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFranchiseValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFranchisesLastClaimDates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetaFranchisesUnclaimedRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetaFranchisesUnclaimedRewardsBNB(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfMetaFranchises(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCeos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalCompanies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalFranchises(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalInvested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _metaCompanyAddress: PromiseOrValue<string>,
      _metaFranchiseManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isCeo(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    self(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMetaFranchise(
      to: PromiseOrValue<string>,
      companyId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      _metaFranchiseType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
