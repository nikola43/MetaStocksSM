/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DividendPayingToken,
  DividendPayingTokenInterface,
} from "../DividendPayingToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_distributionTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weiAmount",
        type: "uint256",
      },
    ],
    name: "DividendWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weiAmount",
        type: "uint256",
      },
    ],
    name: "DividendsDistributed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "accumulativeDividendOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "distributeDividends",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "distributeTokensDividends",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "dividendOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDividendsDistributed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawDividend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "withdrawableDividendOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "withdrawnDividendOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011453803806200114583398101604081905262000034916200014d565b8282600362000044838262000269565b50600462000053828262000269565b5050600780546001600160a01b0319166001600160a01b0393909316929092179091555062000335915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b816040528381526020925086838588010111156200010d57600080fd5b600091505b8382101562000131578582018301518183018401529082019062000112565b83821115620001435760008385830101525b9695505050505050565b6000806000606084860312156200016357600080fd5b83516001600160401b03808211156200017b57600080fd5b620001898783880162000096565b94506020860151915080821115620001a057600080fd5b50620001af8682870162000096565b604086015190935090506001600160a01b0381168114620001cf57600080fd5b809150509250925092565b600181811c90821680620001ef57607f821691505b6020821081036200021057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026457600081815260208120601f850160051c810160208610156200023f5750805b601f850160051c820191505b8181101562000260578281556001016200024b565b5050505b505050565b81516001600160401b0381111562000285576200028562000080565b6200029d81620002968454620001da565b8462000216565b602080601f831160018114620002d55760008415620002bc5750858301515b600019600386901b1c1916600185901b17855562000260565b600085815260208120601f198616915b828110156200030657888601518255948401946001909101908401620002e5565b5085821015620003255787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610e0080620003456000396000f3fe6080604052600436106100e85760003560e01c806303c83302146100f457806306fdde03146100fe578063095ea7b31461012957806318160ddd1461015957806323b872dd1461017857806327ce014714610198578063313ce567146101b857806339509351146101d45780636a474002146101f457806370a082311461020957806385a6b3ae1461022957806391b89fba1461023f57806395d89b411461025f578063a457c2d714610274578063a8b9d24014610294578063a9059cbb146102b4578063aafd847a146102d4578063d16f7e141461030a578063dd62ed3e1461032a57600080fd5b366100ef57005b600080fd5b6100fc61034a565b005b34801561010a57600080fd5b506101136103cb565b6040516101209190610b49565b60405180910390f35b34801561013557600080fd5b50610149610144366004610bba565b61045d565b6040519015158152602001610120565b34801561016557600080fd5b506002545b604051908152602001610120565b34801561018457600080fd5b50610149610193366004610be4565b610477565b3480156101a457600080fd5b5061016a6101b3366004610c20565b610498565b3480156101c457600080fd5b5060405160128152602001610120565b3480156101e057600080fd5b506101496101ef366004610bba565b6104f1565b34801561020057600080fd5b506100fc610513565b34801561021557600080fd5b5061016a610224366004610c20565b61051f565b34801561023557600080fd5b5061016a600a5481565b34801561024b57600080fd5b5061016a61025a366004610c20565b61053a565b34801561026b57600080fd5b50610113610545565b34801561028057600080fd5b5061014961028f366004610bba565b610554565b3480156102a057600080fd5b5061016a6102af366004610c20565b6105d4565b3480156102c057600080fd5b506101496102cf366004610bba565b610600565b3480156102e057600080fd5b5061016a6102ef366004610c20565b6001600160a01b031660009081526009602052604090205490565b34801561031657600080fd5b506100fc610325366004610c3b565b61060a565b34801561033657600080fd5b5061016a610345366004610c54565b610678565b600061035560025490565b1161035f57600080fd5b34156103c95761039261037160025490565b61037f34600160801b6106a3565b6103899190610c9d565b6005549061072c565b6005556040513481523390600080516020610dab8339815191529060200160405180910390a2600a546103c5903461072c565b600a555b565b6060600380546103da90610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461040690610cbf565b80156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b5050505050905090565b60003361046b818585610789565b60019150505b92915050565b6000336104858582856108ad565b61048d600080fd5b506001949350505050565b6001600160a01b038116600090815260086020526040812054600160801b906104e7906104e2906104dc6104d76104ce8861051f565b600554906106a3565b610927565b90610937565b610975565b6104719190610c9d565b60003361046b8185856105048383610678565b61050e9190610cf9565b610789565b61051c33610988565b50565b6001600160a01b031660009081526020819052604090205490565b6000610471826105d4565b6060600480546103da90610cbf565b600033816105628286610678565b9050838110156105c75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61048d8286868403610789565b6001600160a01b038116600090815260096020526040812054610471906105fa84610498565b90610aed565b60003361046b8280fd5b600061061560025490565b1161061f57600080fd5b801561051c5761063f61063160025490565b61037f83600160801b6106a3565b6005556040518181523390600080516020610dab8339815191529060200160405180910390a2600a54610672908261072c565b600a5550565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000826000036106b557506000610471565b60006106c18385610d11565b9050826106ce8583610c9d565b146107255760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105be565b9392505050565b6000806107398385610cf9565b9050838110156107255760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b60448201526064016105be565b6001600160a01b0383166107eb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105be565b6001600160a01b03821661084c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105be565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006108b98484610678565b9050600019811461092157818110156109145760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105be565b6109218484848403610789565b50505050565b6000818181121561047157600080fd5b6000806109448385610d30565b9050600083121580156109575750838112155b8061096c575060008312801561096c57508381125b61072557600080fd5b60008082121561098457600080fd5b5090565b600080610994836105d4565b90508015610ae4576001600160a01b0383166000908152600960205260409020546109bf908261072c565b6001600160a01b038416600081815260096020526040908190209290925590517fee503bee2bb6a87e57bc57db795f98137327401a0e7b7ce42e37926cc1a9ca4d90610a0e9084815260200190565b60405180910390a260075460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201849052600092169063a9059cbb906044016020604051808303816000875af1158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190610d71565b905080610add576001600160a01b038416600090815260096020526040902054610ab89083610aed565b6001600160a01b03909416600090815260096020526040812094909455509192915050565b5092915050565b50600092915050565b600082821115610b3f5760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f77000060448201526064016105be565b6107258284610d93565b600060208083528351808285015260005b81811015610b7657858101830151858201604001528201610b5a565b81811115610b88576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610bb557600080fd5b919050565b60008060408385031215610bcd57600080fd5b610bd683610b9e565b946020939093013593505050565b600080600060608486031215610bf957600080fd5b610c0284610b9e565b9250610c1060208501610b9e565b9150604084013590509250925092565b600060208284031215610c3257600080fd5b61072582610b9e565b600060208284031215610c4d57600080fd5b5035919050565b60008060408385031215610c6757600080fd5b610c7083610b9e565b9150610c7e60208401610b9e565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082610cba57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680610cd357607f821691505b602082108103610cf357634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610d0c57610d0c610c87565b500190565b6000816000190483118215151615610d2b57610d2b610c87565b500290565b600080821280156001600160ff1b0384900385131615610d5257610d52610c87565b600160ff1b8390038412811615610d6b57610d6b610c87565b50500190565b600060208284031215610d8357600080fd5b8151801515811461072557600080fd5b600082821015610da557610da5610c87565b50039056fea493a9229478c3fcd73f66d2cdeb7f94fd0f341da924d1054236d78454116511a26469706673582212208116259a5a809282b32a050ab1127c6de8a4cb30c4e60651b71bd44e7966144464736f6c634300080f0033";

export class DividendPayingToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _name: string,
    _symbol: string,
    _distributionTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DividendPayingToken> {
    return super.deploy(
      _name,
      _symbol,
      _distributionTokenAddress,
      overrides || {}
    ) as Promise<DividendPayingToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _distributionTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _distributionTokenAddress,
      overrides || {}
    );
  }
  attach(address: string): DividendPayingToken {
    return super.attach(address) as DividendPayingToken;
  }
  connect(signer: Signer): DividendPayingToken__factory {
    return super.connect(signer) as DividendPayingToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DividendPayingTokenInterface {
    return new utils.Interface(_abi) as DividendPayingTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DividendPayingToken {
    return new Contract(address, _abi, signerOrProvider) as DividendPayingToken;
  }
}
