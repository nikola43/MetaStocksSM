/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TransactionFeesManager,
  TransactionFeesManagerInterface,
} from "../TransactionFeesManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "lpPairAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calcBuySellTransferFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isExcludedFromFee",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "val",
        type: "bool",
      },
    ],
    name: "setExcludedFromFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "buyFee",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "sellFee",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "transferFee",
        type: "uint16",
      },
    ],
    name: "setFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50612710600155604080516060810182526000808252602082018190529101819052805465ffffffffffff191690556103d18061004e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635342acb414610051578063534c6bcb146100795780636612e66f146100c6578063f72bbec4146100ff575b600080fd5b61006461005f36600461022e565b610120565b60405190151581526020015b60405180910390f35b6100c4610087366004610262565b6000805461ffff94851663ffffffff199091161762010000938516939093029290921761ffff60201b1916600160201b9190931602919091179055565b005b6100c46100d43660046102a5565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b61011261010d3660046102e1565b61013e565b604051908152602001610070565b6001600160a01b031660009081526002602052604090205460ff1690565b6000808061014b86610120565b8061015a575061015a85610120565b1561016a5760009250505061020a565b866001600160a01b0316866001600160a01b03160361019b576000546101949061ffff1683610342565b91506101e6565b866001600160a01b0316856001600160a01b0316036101cb576000546101949062010000900461ffff1683610342565b6000546101e390600160201b900461ffff1683610342565b91505b8115610206576001546101f9838661035a565b6102039190610379565b90505b9150505b949350505050565b80356001600160a01b038116811461022957600080fd5b919050565b60006020828403121561024057600080fd5b61024982610212565b9392505050565b803561ffff8116811461022957600080fd5b60008060006060848603121561027757600080fd5b61028084610250565b925061028e60208501610250565b915061029c60408501610250565b90509250925092565b600080604083850312156102b857600080fd5b6102c183610212565b9150602083013580151581146102d657600080fd5b809150509250929050565b600080600080608085870312156102f757600080fd5b61030085610212565b935061030e60208601610212565b925061031c60408601610212565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b600082198211156103555761035561032c565b500190565b60008160001904831182151516156103745761037461032c565b500290565b60008261039657634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204e83e076075ccc59d529ae586d350deaf4f6e7d5d9df0d6c59cc7891a4f1814c64736f6c634300080f0033";

export class TransactionFeesManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TransactionFeesManager> {
    return super.deploy(overrides || {}) as Promise<TransactionFeesManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TransactionFeesManager {
    return super.attach(address) as TransactionFeesManager;
  }
  connect(signer: Signer): TransactionFeesManager__factory {
    return super.connect(signer) as TransactionFeesManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransactionFeesManagerInterface {
    return new utils.Interface(_abi) as TransactionFeesManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransactionFeesManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TransactionFeesManager;
  }
}
