/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "KeeperCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatibleInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "VRFCoordinatorV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFCoordinatorV2Interface__factory>;
    getContractFactory(
      name: "KeeperBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperBase__factory>;
    getContractFactory(
      name: "KeeperCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatible__factory>;
    getContractFactory(
      name: "VRFConsumerBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBaseV2__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Upgradeable__factory>;
    getContractFactory(
      name: "ERC1155BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155SupplyUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155SupplyUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURIUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721URIStorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "BEP20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BEP20Token__factory>;
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPancakeCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeCallee__factory>;
    getContractFactory(
      name: "IPancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeERC20__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "PancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeERC20__factory>;
    getContractFactory(
      name: "PancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeFactory__factory>;
    getContractFactory(
      name: "PancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakePair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter01__factory>;
    getContractFactory(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "PancakeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter__factory>;
    getContractFactory(
      name: "WBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBNB__factory>;
    getContractFactory(
      name: "AletheiaTruthOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AletheiaTruthOracle__factory>;
    getContractFactory(
      name: "CronusTimeKeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CronusTimeKeeper__factory>;
    getContractFactory(
      name: "IAletheiaTruthOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAletheiaTruthOracle__factory>;
    getContractFactory(
      name: "ICronusTimeOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICronusTimeOracle__factory>;
    getContractFactory(
      name: "ITykheLuckyOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITykheLuckyOracle__factory>;
    getContractFactory(
      name: "TykheLuckyOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TykheLuckyOracle__factory>;
    getContractFactory(
      name: "IAutoLiquidityInjecter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutoLiquidityInjecter__factory>;
    getContractFactory(
      name: "IJoeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeRouter01__factory>;
    getContractFactory(
      name: "IJoeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeRouter02__factory>;
    getContractFactory(
      name: "IPangolinRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPangolinRouter__factory>;
    getContractFactory(
      name: "IMidasManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMidasManager__factory>;
    getContractFactory(
      name: "IMidasManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMidasManager__factory>;
    getContractFactory(
      name: "IMidasMultiNetworkRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMidasMultiNetworkRouter__factory>;
    getContractFactory(
      name: "MidasMultiNetworkRouterManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MidasMultiNetworkRouterManager__factory>;
    getContractFactory(
      name: "DividendPayingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendPayingToken__factory>;
    getContractFactory(
      name: "HermesDividendTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HermesDividendTracker__factory>;
    getContractFactory(
      name: "IDividendPayingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDividendPayingToken__factory>;
    getContractFactory(
      name: "IDividendPayingTokenOptional",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDividendPayingTokenOptional__factory>;
    getContractFactory(
      name: "HermesMerkleAirdropDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HermesMerkleAirdropDistributor__factory>;
    getContractFactory(
      name: "IAutoLiquidityInjecter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutoLiquidityInjecter__factory>;
    getContractFactory(
      name: "ITykheFortuneDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITykheFortuneDistributor__factory>;
    getContractFactory(
      name: "TykheFortuneDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TykheFortuneDistributor__factory>;
    getContractFactory(
      name: "IMetaBaseManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaBaseManager__factory>;
    getContractFactory(
      name: "IMetaCompanyInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaCompanyInfo__factory>;
    getContractFactory(
      name: "IMetaCompanyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaCompanyManager__factory>;
    getContractFactory(
      name: "IMetaFranchiseManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaFranchiseManager__factory>;
    getContractFactory(
      name: "IMetaFranchiseShareManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaFranchiseShareManager__factory>;
    getContractFactory(
      name: "MetaCompanyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaCompanyManager__factory>;
    getContractFactory(
      name: "MetaFranchiseManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaFranchiseManager__factory>;
    getContractFactory(
      name: "MetaFranchiseMarketplaceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaFranchiseMarketplaceManager__factory>;
    getContractFactory(
      name: "MetaShareManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaShareManager__factory>;
    getContractFactory(
      name: "IMetaERC1155ReceiverHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaERC1155ReceiverHolder__factory>;
    getContractFactory(
      name: "IMetaERC1155Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaERC1155Upgradable__factory>;
    getContractFactory(
      name: "MetaERC1155ReceiverHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaERC1155ReceiverHolder__factory>;
    getContractFactory(
      name: "MetaERC1155Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaERC1155Upgradable__factory>;
    getContractFactory(
      name: "IMetaERC721Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaERC721Upgradable__factory>;
    getContractFactory(
      name: "MetaERC721Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaERC721Upgradable__factory>;
    getContractFactory(
      name: "IMetaCompany",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaCompany__factory>;
    getContractFactory(
      name: "IMetaFranchise",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaFranchise__factory>;
    getContractFactory(
      name: "IMetaShare",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaShare__factory>;
    getContractFactory(
      name: "IMetaERC721Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaERC721Upgradable__factory>;
    getContractFactory(
      name: "MetaSoulBoundUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaSoulBoundUpgradable__factory>;
    getContractFactory(
      name: "MetaStocksToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaStocksToken__factory>;
    getContractFactory(
      name: "IMetaCompany",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaCompany__factory>;
    getContractFactory(
      name: "IMetaFranchise",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaFranchise__factory>;
    getContractFactory(
      name: "IMetaFranchiseShare",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetaFranchiseShare__factory>;
    getContractFactory(
      name: "MetaCompany",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaCompany__factory>;
    getContractFactory(
      name: "MetaFranchise",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaFranchise__factory>;
    getContractFactory(
      name: "MetaShare",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaShare__factory>;
    getContractFactory(
      name: "IJoeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeRouter01__factory>;
    getContractFactory(
      name: "IJoeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeRouter02__factory>;
    getContractFactory(
      name: "IPangolinRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPangolinRouter__factory>;
    getContractFactory(
      name: "IAutoLiquidityInjecter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutoLiquidityInjecter__factory>;
    getContractFactory(
      name: "IMidasGoldRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMidasGoldRouter__factory>;
    getContractFactory(
      name: "IMidasMultinetworkRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMidasMultinetworkRouter__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "MidasGoldOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MidasGoldOracle__factory>;
    getContractFactory(
      name: "TransactionFeesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionFeesManager__factory>;
    getContractFactory(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigWallet__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "KeeperCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatibleInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "VRFCoordinatorV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFCoordinatorV2Interface>;
    getContractAt(
      name: "KeeperBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperBase>;
    getContractAt(
      name: "KeeperCompatible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatible>;
    getContractAt(
      name: "VRFConsumerBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBaseV2>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Upgradeable>;
    getContractAt(
      name: "ERC1155BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155BurnableUpgradeable>;
    getContractAt(
      name: "ERC1155SupplyUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155SupplyUpgradeable>;
    getContractAt(
      name: "IERC1155MetadataURIUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BurnableUpgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "ERC721URIStorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "BEP20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BEP20Token>;
    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPancakeCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeCallee>;
    getContractAt(
      name: "IPancakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeERC20>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "PancakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeERC20>;
    getContractAt(
      name: "PancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeFactory>;
    getContractAt(
      name: "PancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakePair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "IPancakeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter01>;
    getContractAt(
      name: "IPancakeRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "PancakeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeRouter>;
    getContractAt(
      name: "WBNB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WBNB>;
    getContractAt(
      name: "AletheiaTruthOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AletheiaTruthOracle>;
    getContractAt(
      name: "CronusTimeKeeper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CronusTimeKeeper>;
    getContractAt(
      name: "IAletheiaTruthOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAletheiaTruthOracle>;
    getContractAt(
      name: "ICronusTimeOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICronusTimeOracle>;
    getContractAt(
      name: "ITykheLuckyOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITykheLuckyOracle>;
    getContractAt(
      name: "TykheLuckyOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TykheLuckyOracle>;
    getContractAt(
      name: "IAutoLiquidityInjecter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutoLiquidityInjecter>;
    getContractAt(
      name: "IJoeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeRouter01>;
    getContractAt(
      name: "IJoeRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeRouter02>;
    getContractAt(
      name: "IPangolinRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPangolinRouter>;
    getContractAt(
      name: "IMidasManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMidasManager>;
    getContractAt(
      name: "IMidasManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMidasManager>;
    getContractAt(
      name: "IMidasMultiNetworkRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMidasMultiNetworkRouter>;
    getContractAt(
      name: "MidasMultiNetworkRouterManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MidasMultiNetworkRouterManager>;
    getContractAt(
      name: "DividendPayingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendPayingToken>;
    getContractAt(
      name: "HermesDividendTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HermesDividendTracker>;
    getContractAt(
      name: "IDividendPayingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDividendPayingToken>;
    getContractAt(
      name: "IDividendPayingTokenOptional",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDividendPayingTokenOptional>;
    getContractAt(
      name: "HermesMerkleAirdropDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HermesMerkleAirdropDistributor>;
    getContractAt(
      name: "IAutoLiquidityInjecter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutoLiquidityInjecter>;
    getContractAt(
      name: "ITykheFortuneDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITykheFortuneDistributor>;
    getContractAt(
      name: "TykheFortuneDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TykheFortuneDistributor>;
    getContractAt(
      name: "IMetaBaseManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaBaseManager>;
    getContractAt(
      name: "IMetaCompanyInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaCompanyInfo>;
    getContractAt(
      name: "IMetaCompanyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaCompanyManager>;
    getContractAt(
      name: "IMetaFranchiseManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaFranchiseManager>;
    getContractAt(
      name: "IMetaFranchiseShareManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaFranchiseShareManager>;
    getContractAt(
      name: "MetaCompanyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaCompanyManager>;
    getContractAt(
      name: "MetaFranchiseManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaFranchiseManager>;
    getContractAt(
      name: "MetaFranchiseMarketplaceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaFranchiseMarketplaceManager>;
    getContractAt(
      name: "MetaShareManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaShareManager>;
    getContractAt(
      name: "IMetaERC1155ReceiverHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaERC1155ReceiverHolder>;
    getContractAt(
      name: "IMetaERC1155Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaERC1155Upgradable>;
    getContractAt(
      name: "MetaERC1155ReceiverHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaERC1155ReceiverHolder>;
    getContractAt(
      name: "MetaERC1155Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaERC1155Upgradable>;
    getContractAt(
      name: "IMetaERC721Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaERC721Upgradable>;
    getContractAt(
      name: "MetaERC721Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaERC721Upgradable>;
    getContractAt(
      name: "IMetaCompany",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaCompany>;
    getContractAt(
      name: "IMetaFranchise",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaFranchise>;
    getContractAt(
      name: "IMetaShare",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaShare>;
    getContractAt(
      name: "IMetaERC721Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaERC721Upgradable>;
    getContractAt(
      name: "MetaSoulBoundUpgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaSoulBoundUpgradable>;
    getContractAt(
      name: "MetaStocksToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaStocksToken>;
    getContractAt(
      name: "IMetaCompany",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaCompany>;
    getContractAt(
      name: "IMetaFranchise",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaFranchise>;
    getContractAt(
      name: "IMetaFranchiseShare",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetaFranchiseShare>;
    getContractAt(
      name: "MetaCompany",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaCompany>;
    getContractAt(
      name: "MetaFranchise",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaFranchise>;
    getContractAt(
      name: "MetaShare",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaShare>;
    getContractAt(
      name: "IJoeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeRouter01>;
    getContractAt(
      name: "IJoeRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeRouter02>;
    getContractAt(
      name: "IPangolinRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPangolinRouter>;
    getContractAt(
      name: "IAutoLiquidityInjecter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutoLiquidityInjecter>;
    getContractAt(
      name: "IMidasGoldRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMidasGoldRouter>;
    getContractAt(
      name: "IMidasMultinetworkRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMidasMultinetworkRouter>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "MidasGoldOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MidasGoldOracle>;
    getContractAt(
      name: "TransactionFeesManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionFeesManager>;
    getContractAt(
      name: "MultiSigWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigWallet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
